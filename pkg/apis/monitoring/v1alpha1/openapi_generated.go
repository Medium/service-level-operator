// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.Output":                 schema_pkg_apis_monitoring_v1alpha1_Output(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusOutputSource": schema_pkg_apis_monitoring_v1alpha1_PrometheusOutputSource(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusSLISource":    schema_pkg_apis_monitoring_v1alpha1_PrometheusSLISource(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLI":                    schema_pkg_apis_monitoring_v1alpha1_SLI(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLISource":              schema_pkg_apis_monitoring_v1alpha1_SLISource(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLO":                    schema_pkg_apis_monitoring_v1alpha1_SLO(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevel":           schema_pkg_apis_monitoring_v1alpha1_ServiceLevel(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevelList":       schema_pkg_apis_monitoring_v1alpha1_ServiceLevelList(ref),
		"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevelSpec":       schema_pkg_apis_monitoring_v1alpha1_ServiceLevelSpec(ref),
	}
}

func schema_pkg_apis_monitoring_v1alpha1_Output(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Output is how the SLO will expose the generated SLO.",
				Properties: map[string]spec.Schema{
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Prometheus is the prometheus format for the SLO output.",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusOutputSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusOutputSource"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_PrometheusOutputSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PrometheusOutputSource  is the source of the output in prometheus format.",
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels are the labels that will be set to the output metrics of this SLO.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_PrometheusSLISource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PrometheusSLISource is the source to get SLIs from a Prometheus backend.",
				Properties: map[string]spec.Schema{
					"address": {
						SchemaProps: spec.SchemaProps{
							Description: "Address is the address of the Prometheus.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"totalQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "TotalQuery is the query that gets the total that will be the base to get the unavailability of the SLO based on the errorQuery (errorQuery / totalQuery).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"errorQuery": {
						SchemaProps: spec.SchemaProps{
							Description: "ErrorQuery is the query that gets the total errors that then will be divided against the total.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"address", "totalQuery", "errorQuery"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_SLI(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SLI is the SLI to get for the SLO.",
				Properties: map[string]spec.Schema{
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Prometheus is the prometheus SLI source.",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusSLISource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusSLISource"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_SLISource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SLISource is where the SLI will get from.",
				Properties: map[string]spec.Schema{
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Prometheus is the prometheus SLI source.",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusSLISource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.PrometheusSLISource"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_SLO(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SLO represents a SLO.",
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the SLO, must be made of [a-zA-z0-9] and '_'(underscore) characters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description is a description of the SLO.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"disable": {
						SchemaProps: spec.SchemaProps{
							Description: "Disable will disable the SLO.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"availabilityObjectivePercent": {
						SchemaProps: spec.SchemaProps{
							Description: "AvailabilityObjectivePercent is the percentage of availability target for the SLO.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"serviceLevelIndicator": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceLevelIndicator is the SLI associated with the SLO.",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLI"),
						},
					},
					"output": {
						SchemaProps: spec.SchemaProps{
							Description: "Output is the output backedn of the SLO.",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.Output"),
						},
					},
				},
				Required: []string{"name", "availabilityObjectivePercent", "serviceLevelIndicator", "output"},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.Output", "github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLI"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_ServiceLevel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceLevel represents a service level policy to measure the service level of an application.",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the ddesired behaviour of the pod terminator. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
							Ref:         ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevelSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevelSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_ServiceLevelList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceLevelList is a list of ServiceLevel resources",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevel"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.ServiceLevel", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_monitoring_v1alpha1_ServiceLevelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceLevelSpec is the spec for a ServiceLevel resource.",
				Properties: map[string]spec.Schema{
					"serviceLevelObjectives": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceLevelObjectives is the list of SLOs of a service/app.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLO"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/spotahome/service-level-operator/pkg/apis/monitoring/v1alpha1.SLO"},
	}
}
